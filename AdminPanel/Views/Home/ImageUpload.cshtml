@model AdminPanel.Models.ImageAndContentModel

@{
    ViewBag.Title = "ImageUpload";
}

<h2>ImageUpload</h2>


@using (Html.BeginForm("ImageUpload", "Home", FormMethod.Post, new { encType = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>ImageAndContentModel</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.SelectedCategory, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.SelectedCategory, Model.Categories, "Select Category", new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SelectedCategory, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SelectedSubCategory, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.SelectedSubCategory, Model.SubCategories, "Select SubCategory", new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SelectedSubCategory, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Content, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Content, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Content, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Files, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.Files, new { @class = "form-control", type = "file", name = "Files" })
                @Html.ValidationMessageFor(model => model.Files, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
        <div style="color:green;">
            <b>@TempData["SuccessMsg"]</b>
        </div>
    </div>
}

<div>
    @{Html.RenderAction("ImageContent_List", "Home");}
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    
}
@Scripts.Render("~/bundles/jquery")
<script src="~/Scripts/ckeditor/ckeditor.js"></script>
<script type="text/javascript">

    $(document).ready(function () {
        var editor = CKEDITOR.replace('Content');

        editor.on('change', function (evt) {
            // getData() returns CKEditor's HTML content.
            console.log('editor content ' + evt.editor.getData());
            $("#Content").val(evt.editor.getData());
        });
        //Dropdownlist Selectedchange event
        $("#SelectedCategory").change(function () {
            $("#SelectedSubCategory").empty();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetSubCategoryByCategory","Home")', // we are calling json method

                dataType: 'json',

                data: { categoryId: $("#SelectedCategory").val() },
               // here we are get value of selected country and passing same value
                 // as inputto json method GetStates.

                success: function (states) {
                    // states contains the JSON formatted list
                    // of states passed from the controller

                    $.each(states, function (i, state) {
                        $("#SelectedSubCategory").append('<option value="' + state.Value + '">' +
                         state.Text + '</option>');
                    // here we are adding option for States

                    });
                },
                error: function (ex) {
                    alert('Failed to retrieve states.' + ex);
                }
            });
            return false;
        })
    });
</script>  